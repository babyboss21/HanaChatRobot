from pyrogram import Client, filters
from pyrogram.types import *
from pymongo import MongoClient
import requests
import os
import re


API_ID = os.environ.get("API_ID", None) 
API_HASH = os.environ.get("API_HASH", None) 
BOT_TOKEN = os.environ.get("BOT_TOKEN", None) 
HANA_API = os.environ.get("HANA_API", None) 
ERROR_LOG = os.environ.get("ERROR_LOG", None) 
MONGO_URL = os.environ.get("MONGO_URL", None)


bot = Client(
    "HanaChatRobot" ,
    api_id = API_ID,
    api_hash = API_HASH ,
    bot_token = BOT_TOKEN
)

async def is_admins(chat_id: int):
    return [
        member.user.id
        async for member in bot.iter_chat_members(
            chat_id, filter="administrators"
        )
    ]


@bot.on_message(
    filters.command("chatbot on", prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def addchat(_, message): 
    hanadb = MongoClient(MONGO_URL)
    
    hana = hanadb["HanaDb"]["Hana"] 
    if message.from_user:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (
            await is_admins(chat_id)
        ):
            return await message.reply_text(
                "¬ª  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥. | ·¥Ñ ú ü·¥Ä ·¥ä·¥Ä  ôs·¥Ö·¥ã  ô…¥·¥Ä ·¥Ö·¥ú ·¥è·¥°…¥·¥á Ä üòÇ"
            )
    is_hana = hana.find_one({"chat_id": message.chat.id})
    if not is_hana:
        hana.insert_one({"chat_id": message.chat.id})
        await message.reply_text(f"‚úÖ | s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è\n ú·¥Ä…¥·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥è…¥ ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò …™s s·¥á·¥õ ·¥õ·¥è @{message.chat.username}\n  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è [{message.from_user.first_name}](tg://user?id={message.from_user.id})\n·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥õ·¥á·¥Ñ ú «´·¥ú·¥Ä Ä·¥Ö")
    else:
        await message.reply_text(f"¬ª ·¥Ä ü Ä·¥á·¥Ä·¥Ö è s·¥á·¥õ·¥ú·¥ò  ú·¥Ä…¥·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥á…¥·¥Ä ô ü·¥á ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò …™s @{message.chat.username}")


@bot.on_message(
    filters.command("chatbot off", prefixes=["/", ".", "?", "-"])
    & ~filters.private)
async def rmchat(_, message): 
    hanadb = MongoClient(MONGO_URL)
    
    hana = hanadb["HanaDb"]["Hana"] 
    if message.from_user:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (
            await is_admins(chat_id)
        ):
            return await message.reply_text(
                "¬ª  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥. | ·¥Ñ ú ü·¥Ä ·¥ä·¥Ä  ôs·¥Ö·¥ã  ô…¥·¥Ä ·¥Ö·¥ú ·¥Ä·¥Ö·¥ç…™…¥ üòÇ"
            )
    is_hana = hana.find_one({"chat_id": message.chat.id})
    if not is_hana:
        await message.reply_text("¬ª ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ú·¥Ä…¥·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö")
    else:
        hana.delete_one({"chat_id": message.chat.id})
        await message.reply_text("‚úÖ |  ú·¥Ä…¥·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™s ·¥Ö…™s·¥Ä ô ü·¥á")





@bot.on_message(
    filters.text
    & filters.reply
    & ~filters.private
    & ~filters.bot
    & ~filters.edited,
    group=2,
)
async def hanaai(client: Client, message: Message):

   hanadb = MongoClient(MONGO_URL)
    
   hana = hanadb["HanaDb"]["Hana"] 

   is_hana = hana.find_one({"chat_id": message.chat.id})
   if is_hana:
       if message.reply_to_message:      
           botget = await bot.get_me()
           botid = botget.id
           if not message.reply_to_message.from_user.id == botid:
               return
           await bot.send_chat_action(message.chat.id, "typing")
           if not message.text:
               msg = "/"
           else:
               msg = message.text
           try: 
               x = requests.get(f"https://kukiapi.xyz/api/apikey={HANA_API}/message={msg}").json()
               x = x['reply']
               await asyncio.sleep(1)
           except Exception as e:
               error = str(e)
           await message.reply_text(x)
           await bot.send_message(
           ERROR_LOG, f"""{error}""")
           await bot.send_chat_action(message.chat.id, "cencel") 
   


@bot.on_message(
    filters.text
    & filters.reply
    & filters.private
    & ~filters.bot
    & ~filters.edited,
    group=2,
)
async def hanaai(client: Client, message: Message):
    await bot.send_chat_action(message.chat.id, "typing")
    if not message.text:
        msg = "/"
    else:
        msg = message.text
    try:
        x = requests.get(f"https://kukiapi.xyz/api/apikey={HANA_API}/message={msg}").json()
        x = x['reply']
        await asyncio.sleep(1)
    except Exception as e:
        ERROR = str(e)
    await message.reply_text(x)
    await bot.send_message(
           ERROR_LOG, f"""{ERROR}""")
    await bot.send_chat_action(message.chat.id, "cancel")



@bot.on_message(
    filters.command("chat", prefixes=["/", ".", "?", "-"]))
async def hanaai(client: Client, message: Message):
    await bot.send_chat_action(message.chat.id, "typing")
    if not message.text:
        msg = "/"
    else:
        msg = message.text.replace(message.text.split(" ")[0], "")
    try:
        x = requests.get(f"https://kukiapi.xyz/api/apikey={HANA_API}/message={msg}").json()
        x = x['reply']
        await asyncio.sleep(1)
    except Exception as e:
        ERROR = str(e)
    await bot.send_message(
           ERROR_LOG, f"""{ERROR}""")
    await message.reply_text(x)
    





@bot.on_message(filters.command(["start"], prefixes=["/", "!"]))
async def start(client, message):
    self = await bot.get_me()
    busername = self.username
    if message.chat.type != "private":
        buttons = [[InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url="https://t.me/TechQuard"),
                   InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/TechQuardSupport"),],
                  [InlineKeyboardButton(text="·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á", url=f"t.me/HanachatRobot?start")]]
        await message.reply("·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥á Äs·¥è…¥·¥Ä ü",
                            reply_markup=buttons)
        
    else:
        buttons = [[
            InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/HanaChatRobot?startgroup=true")
        ],
        
        [
            InlineKeyboardButton("üë• ·¥è“ì“ì…™·¥Ñ…™·¥Ä ü …¢ Ä·¥è·¥ú·¥ò", url="https://t.me/TechQuardSupport"),
            InlineKeyboardButton("üì£ ·¥è“ì“ì…™·¥Ñ…™·¥Ä ü ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/TechQuard")
        ],
        [
            InlineKeyboardButton("üí†  è·¥è·¥ú·¥õ·¥ú ô·¥á üí†", url="https://youtube.com/channel/UCtI7hbY-BD7wvuIzoSU0cEw")
        ]]
        Photo = "https://te.legra.ph/file/b9eab8788d5c8bcb85f9f.jpg"
        await message.reply_photo(Photo, caption=f""" ú·¥á ü ü·¥è [{message.from_user.first_name}](tg://user?id={message.from_user.id}),
…™ ·¥Ä·¥ç ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä Ä·¥õ…™“ì…™·¥Ñ·¥Ä ü …™…¥·¥õ·¥á ü ü…™…¢·¥á…¥·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ  ô·¥è·¥õ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä ü·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä…¥ è ·¥õ·¥è·¥ò…™·¥Ñ …™…¥ ·¥Ä…¥ è  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ûõ …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á “ì·¥á·¥á ü…™…¥…¢  ü·¥è…¥·¥á ü è,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä ü·¥°·¥Ä ès ·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥ç·¥á ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä·¥õ ·¥°…™·¥õ ú ·¥ç·¥á
‚ûõ ·¥õ Ä è ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥Ñ·¥ç·¥Ös. ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç è ·¥Ä ô…™ ü…™·¥õ…™·¥ás √ó√ó""", reply_markup=InlineKeyboardMarkup(buttons))



@bot.on_message(filters.command(["help"], prefixes=["/", "!"]))
async def help(client, message):
    self = await bot.get_me()
    busername = self.username
    if message.chat.type != "private":
        buttons = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text="·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á",
                url=f"t.me/HanaChatRobot?start=help_")]])
        await message.reply("·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥á Äs·¥è…¥·¥Ä ü",
                            reply_markup=buttons)
        
    else: 
        await message.reply_text("‚ûõ /start - s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ\n‚ûõ /chat - s·¥á…¥·¥Ö ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥õ ú…™s  ô·¥è·¥õ\n‚ûõ /chatbot on- ·¥Ä·¥Ñ·¥õ…™·¥†·¥á  ú·¥Ä…¥·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò\n‚ûõ /chatbot off - ·¥Ö…™s·¥Ä ô ü·¥á  ú·¥Ä…¥·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò")






bot.run()

